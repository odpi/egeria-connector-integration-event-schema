/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Contributors to the ODPi Egeria project.
 */

plugins {
    id 'java-library'
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'idea'
    id 'maven-publish'
}

if (System.getenv("CI")) {
    apply plugin: 'signing'
}

repositories {
    mavenCentral()
    maven { url("https://oss.sonatype.org/content/repositories/snapshots") }
    mavenLocal() // note - this may pick up modified classes from ~/.m2
}

// ensures we pick up the very latest snapshots when built
configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

// TODO: Specify group, name, description, version of new code being built
group = 'org.odpi.egeria'
version = '1.0-SNAPSHOT'
ext.name = 'New Egeria code'
description = 'New code for Egeria'

// TODO: Specify Dependency versions as variables
ext {
    egeriaversion = '3.6'
    slf4jVersion = '1.7.36'
    jacksonVersion = '2.13.2'
    jupiterVersion = '5.9.1'
    httpclientVersion = '4.5.13'
}

// For a single module, add here. For multiple modules, refactor and use constraints (see main egeria build.gradle for an example)
// TODO: Update dependencies for this module
dependencies {

    // Only used for build - already present in server chassis at runtime - similar to 'provided' with maven
    compileOnly "org.odpi.egeria:audit-log-framework:${egeriaversion}"

    // Needed for build and run
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"

    // Only needed to compile test code
    testCompileOnly "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}"
    testImplementation "org.odpi.egeria:topic-integrator-api:${egeriaversion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}"

}


test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    reports {
        html.required = true
    }
    filter {
        includeTestsMatching "*Test"
    }
}


// Maven Central (technically sonatype oss) requires we distribute source and javadoc.
java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

// More Java language settings
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = "11"
    targetCompatibility = "11"
    options.incremental = true
    options.fork = true
    options.failOnError = true
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

// For later java versions this is recommended - keep conditional in case we want to build on 8
javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

// We will typically build an uber jar with dependencies. Can change name here.
shadowJar {
    archiveClassifier = 'jar-with-dependencies'
}

// We want to built a jar with dependencies in a normal build, so to avoid specifying task explicitly
build.dependsOn shadowJar


// We only have a single artifact for now - this additional metadata is
// required for publishing to maven central. Only doing signing in 'CI'
publishing {
    publications {
        connector(MavenPublication) {
            from components.java
            pom {
                url = 'http://egeria.odpi.org'
                licenses {
                    // Code
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                    // Docs
                    license {
                        name = 'Creative Commons Attribution 4.0 International (CC BY 4.0)'
                        url = 'https://creativecommons.org/licenses/by/4.0'
                    }
                }
                developers {
                    developer {
                        id = 'planetf1'
                        name = 'Nigel Jones'
                        email = 'nigel.l.jones+git@gmail.com'
                    }
                }
                scm {
                    // TODO: Update references to git source for this particular repository
                    connection = 'scm:git:git://github.com/odpi/egeria-template-newrepo.git'
                    developerConnection = 'scm:git:ssh://github.com/odpi/egeria/egeria-template-newrepo.git'
                    url = 'http://github.com/odpi/egeria-template-newrepo/'
                }
            }
            // Override the project name & description for the pom based on properties set in the child build.gradle (hard to default & required for maven central)
            pom.withXml {
                asNode().appendNode('name', "${project.ext.name}")
                asNode().appendNode('description', "${project.description}")
            }
        }
    }

    // Release versions get pushed to staging area on maven central, snapshots to snapshot repo
    // Secrets for credentials
    if (System.getenv("CI")) {
        repositories {
            maven {
                name = 'OSSRH'
                def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                // User token (under profile) on oss.sonatype.org
                credentials {
                    username = System.getenv("OSSRH_USERNAME")
                    password = System.getenv("OSSRH_TOKEN")
                }
            }
        }
    }
}

// To publish to ossrh we need to sign the artifacts - only in CI
if (System.getenv("CI")) {
    signing {
        // This is the publication to sign
        sign publishing.publications.connector
        // gpg --export-secret-keys myemal@gmail.com | base64
        def signingKey = System.getenv("OSSRH_GPG_PRIVATE_KEY")
        // Passphrase for key
        def signingPassword = System.getenv("OSSRH_GPG_PASSPHRASE")
        // public key id (last 8 characters only) - note keys also need uploading to all the main registries
        def signingKeyId = System.getenv("OSSRH_GPG_KEYID")
        // We use these values from secrets rather than gradle.properties
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    }
}
